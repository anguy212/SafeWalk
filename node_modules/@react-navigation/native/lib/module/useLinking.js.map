{"version":3,"sources":["useLinking.tsx"],"names":["React","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getStateLength","state","length","history","index","focusedState","routes","stale","isUsingLinking","useLinking","ref","enabled","config","useEffect","Error","join","trim","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","current","getInitialState","useCallback","value","path","location","pathname","search","then","callback","Promise","resolve","thenable","catch","previousStateLengthRef","undefined","previousHistoryIndexRef","pendingIndexChangeRef","pendingStateUpdateRef","pendingStateMultiUpdateRef","numberOfIndicesAhead","onPopState","navigation","previousHistoryIndex","historyIndex","getRootState","canGoBack","numberOfBacks","replaceState","i","goBack","action","dispatch","resetRoot","window","addEventListener","removeEventListener","unsubscribe","addListener","previousStateLength","stateLength","l","pushState","delta","Math","min","go"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryState = { index: number };\n\ndeclare const history: {\n  state?: HistoryState;\n  go(delta: number): void;\n  pushState(state: HistoryState, title: string, url: string): void;\n  replaceState(state: HistoryState, title: string, url: string): void;\n};\n\nconst getStateLength = (state: NavigationState) => {\n  let length = 0;\n\n  if (state.history) {\n    length = state.history.length;\n  } else {\n    length = state.index + 1;\n  }\n\n  const focusedState = state.routes[state.index].state;\n\n  if (focusedState && !focusedState.stale) {\n    // If the focused route has history entries, we need to count them as well\n    length += getStateLength(focusedState as NavigationState) - 1;\n  }\n\n  return length;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const path = location.pathname + location.search;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const then = (callback: (state: ResultState | undefined) => void) =>\n      Promise.resolve(callback(value));\n\n    // Make it a thenable to keep consistent with the native impl\n    const thenable = {\n      then,\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable;\n  }, []);\n\n  const previousStateLengthRef = React.useRef<number | undefined>(undefined);\n  const previousHistoryIndexRef = React.useRef(0);\n\n  const pendingIndexChangeRef = React.useRef<number | undefined>();\n  const pendingStateUpdateRef = React.useRef<boolean>(false);\n  const pendingStateMultiUpdateRef = React.useRef<boolean>(false);\n\n  // If we're navigating ahead >1, we're not restoring whole state,\n  // but just navigate to the selected route not caring about previous routes\n  // therefore if we need to go back, we need to pop screen and navigate to the new one\n  // Possibly, we will need to reuse the same mechanism.\n  // E.g. if we went ahead+4 (numberOfIndicesAhead = 3), and back-2,\n  // actually we need to pop the screen we navigated\n  // and navigate again, setting numberOfIndicesAhead to 1.\n  const numberOfIndicesAhead = React.useRef(0);\n\n  React.useEffect(() => {\n    const onPopState = () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousHistoryIndex = previousHistoryIndexRef.current;\n      const historyIndex = history.state?.index ?? 0;\n\n      previousHistoryIndexRef.current = historyIndex;\n\n      if (pendingIndexChangeRef.current === historyIndex) {\n        pendingIndexChangeRef.current = undefined;\n        return;\n      }\n\n      const state = navigation.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      let canGoBack = true;\n      let numberOfBacks = 0;\n\n      if (previousHistoryIndex === historyIndex) {\n        if (location.pathname + location.search !== path) {\n          pendingStateUpdateRef.current = true;\n          history.replaceState({ index: historyIndex }, '', path);\n        }\n      } else if (previousHistoryIndex > historyIndex) {\n        numberOfBacks =\n          previousHistoryIndex - historyIndex - numberOfIndicesAhead.current;\n\n        if (numberOfBacks > 0) {\n          pendingStateMultiUpdateRef.current = true;\n\n          if (numberOfBacks > 1) {\n            pendingStateMultiUpdateRef.current = true;\n          }\n\n          pendingStateUpdateRef.current = true;\n\n          for (let i = 0; i < numberOfBacks; i++) {\n            navigation.goBack();\n          }\n        } else {\n          canGoBack = false;\n        }\n      }\n\n      if (previousHistoryIndex < historyIndex || !canGoBack) {\n        if (canGoBack) {\n          numberOfIndicesAhead.current =\n            historyIndex - previousHistoryIndex - 1;\n        } else {\n          navigation.goBack();\n          numberOfIndicesAhead.current -= previousHistoryIndex - historyIndex;\n        }\n\n        const state = getStateFromPathRef.current(\n          location.pathname + location.search,\n          configRef.current\n        );\n\n        pendingStateMultiUpdateRef.current = true;\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          pendingStateUpdateRef.current = true;\n\n          if (action !== undefined) {\n            navigation.dispatch(action);\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    window.addEventListener('popstate', onPopState);\n\n    return () => window.removeEventListener('popstate', onPopState);\n  }, [enabled, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current && previousStateLengthRef.current === undefined) {\n      previousStateLengthRef.current = getStateLength(\n        ref.current.getRootState()\n      );\n    }\n\n    if (ref.current && location.pathname + location.search === '/') {\n      history.replaceState(\n        { index: history.state?.index ?? 0 },\n        '',\n        getPathFromStateRef.current(\n          ref.current.getRootState(),\n          configRef.current\n        )\n      );\n    }\n\n    const unsubscribe = ref.current?.addListener('state', () => {\n      const navigation = ref.current;\n\n      if (!navigation) {\n        return;\n      }\n\n      const state = navigation.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      const previousStateLength = previousStateLengthRef.current ?? 1;\n      const stateLength = getStateLength(state);\n\n      if (pendingStateMultiUpdateRef.current) {\n        if (location.pathname + location.search === path) {\n          pendingStateMultiUpdateRef.current = false;\n        } else {\n          return;\n        }\n      }\n\n      previousStateLengthRef.current = stateLength;\n\n      if (\n        pendingStateUpdateRef.current &&\n        location.pathname + location.search === path\n      ) {\n        pendingStateUpdateRef.current = false;\n        return;\n      }\n\n      let index = history.state?.index ?? 0;\n\n      if (previousStateLength === stateLength) {\n        // If no new entries were added to history in our navigation state, we want to replaceState\n        if (location.pathname + location.search !== path) {\n          history.replaceState({ index }, '', path);\n          previousHistoryIndexRef.current = index;\n        }\n      } else if (stateLength > previousStateLength) {\n        // If new entries were added, pushState until we have same length\n        // This won't be accurate if multiple entries were added at once, but that's the best we can do\n        for (let i = 0, l = stateLength - previousStateLength; i < l; i++) {\n          index++;\n          history.pushState({ index }, '', path);\n        }\n\n        previousHistoryIndexRef.current = index;\n      } else if (previousStateLength > stateLength) {\n        const delta = Math.min(\n          previousStateLength - stateLength,\n          // We need to keep at least one item in the history\n          // Otherwise we'll exit the page\n          previousHistoryIndexRef.current - 1\n        );\n\n        if (delta > 0) {\n          // We need to set this to ignore the `popstate` event\n          pendingIndexChangeRef.current = index - delta;\n\n          // If new entries were removed, go back so that we have same length\n          history.go(-delta);\n        } else {\n          // We're not going back in history, but the navigation state changed\n          // The URL probably also changed, so we need to re-sync the URL\n          if (location.pathname + location.search !== path) {\n            history.replaceState({ index }, '', path);\n            previousHistoryIndexRef.current = index;\n          }\n        }\n      }\n    });\n\n    return unsubscribe;\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]}